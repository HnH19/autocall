### IMPORT :

# python packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time





def computePricesForGreek(greekFlag, t_steps, TtM, Drift, Vol, DsR, S_0, S_k, S_p, N, I, r_param, n_simu, sc):
    # INPUT:
    # greekFlag : 'V' = Vega
    #             'D' = Delta
    #             'R' = Rho
    # t_steps : time steps
    # TtM     : time to maturity
    # Drift   : drift list by time
    # Vol     : volatility list by time
    # Disc    : discount rate
    # S_0     : underlying initial value
    # S_k     : kickout barrier
    # S_p     : protection barrier
    # N       : nominal value
    # I       : yearly interest over the nominal
    # r_param : range of the parameters
    # n_simu  : number of simulation by monte carlo
    # sc      : spark context

    # OUTPUT:
    # prices  : list of prices
    # denoms  : parameter over wich the price is computed

    import myautocallable as acl

    prices = []
    denoms = []

    counter = 0
    for param in r_param:
        print(int(counter / len(r_param) * 100), '% of simulation')
        prices.append(acl.distribuitedMonteCarloPrice(param, greekFlag, t_steps, TtM, Drift, Vol, DsR, S_0, S_k, S_p, N, I, sc, n_simu))
        if greekFlag == 'V':
            denoms.append(Vol.mean() * param)
        elif greekFlag == 'D':
            denoms.append(S_0 * param)
        elif greekFlag == 'R':
            denoms.append(Drift.mean() * param)
        else:
            print('ERROR')
            return 0, 0
        counter += 1

    print(int(counter / len(r_param) * 100), '% of simulation')
    return prices, denoms


def derivateGreek(num, denom):
    
    # INPUT:
    # num : numerator of the differential operator
    # denom : denominator of the differential operator

    # OUTPUT
    # greek : values of the derivatives over denom_prime
    # denom_gr : will be len(denom) - 1

    greek = []
    denom_gr = []
    for i in range(len(num)-1):
        greek.append((num[i+1] - num[i]) / (denom[i+1] - denom[i]))
        denom_gr.append((denom[i+1] + denom[i]) / 2)

    return greek, denom_gr


def plot(greek, denom_gr, primitive, denom_pr, label_gr, label_pr, label_denom):

    import matplotlib.pyplot as plt 

    # plot vega
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    ax1.set_xlabel(label_denom)
    ax1.set_ylabel(label_pr, color='tab:blue')
    ax1.plot(denom_pr, primitive, color='tab:blue')
    ax1.tick_params(axis='y', labelcolor='tab:blue')

    ax2.set_ylabel(label_gr, color='tab:red')  # we already handled the x-label with ax1
    ax2.plot(denom_gr, greek, color='tab:red')
    ax2.tick_params(axis='y', labelcolor='tab:red')

    fig.tight_layout()  # otherwise the right y-label is slightly clipped

    return fig, ax1, ax2

def callPrice(Spot, Strk, TtM, InR, Sigma):
    
    # INPUT
    # Spot  : spot price
    # Strk  : strike price
    # TtM   : time to maturity
    # InRn  : interest rate
    # Sigma : volatility

    # OUTPUT
    # out   : call price

    from numpy import log, exp, sqrt
    from scipy.stats import norm
    
    d1 = (log(Spot / Strk) + (InR + 0.5 * Sigma ** 2) * TtM) / (Sigma * sqrt(TtM))
    d2 = (log(Spot / Strk) + (InR - 0.5 * Sigma ** 2) * TtM) / (Sigma * sqrt(TtM))
    
    return (Spot * norm.cdf(d1, 0.0, 1.0) - Strk * exp(-InR * TtM) * norm.cdf(d2, 0.0, 1.0))


def putPrice(Spot, Strk, TtM, InR, Sigma):
     
    # INPUT
    # Spot  : spot price
    # Strk  : strike price
    # TtM   : time to maturity
    # InRn  : interest rate
    # Sigma : volatility

    # OUTPUT
    # out   : call price
   
    from numpy import log, exp, sqrt
    from scipy.stats import norm
    
    d1 = (log(Spot / Strk) + (InR + 0.5 * Sigma ** 2) * TtM) / (Sigma * sqrt(TtM))
    d2 = (log(Spot / Strk) + (InR - 0.5 * Sigma ** 2) * TtM) / (Sigma * sqrt(TtM))

    return (Strk * exp(-InR * TtM) * norm.cdf(-d2, 0.0, 1.0) - Spot * norm.cdf(-d1, 0.0, 1.0))


def vegaa(Spot, Strk, TtM, InR, Sigma):
    
    # INPUT
    # Spot  : spot price
    # Strk  : strike price
    # TtM   : time to maturity
    # InRn  : interest rate
    # Sigma : volatility

    # OUTPUT
    # out   : call price

    from scipy.stats import norm
    from numpy import log, sqrt

    d1 = (log(Spot / Strk) + (InR + 0.5 * Sigma ** 2) * TtM) / (Sigma * sqrt(TtM))

    return Spot * sqrt(TtM) * norm.cdf(d1)


def payoff(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I, RND):

    # INPUT:
    # t_steps : time steps
    # TtM     : time to maturity
    # Drift   : drift list by time
    # Vol     : volatility list by time
    # Disc    : discount rate
    # S_0     : underlying initial value
    # S_k     : kickout barrier
    # S_p     : protection barrier
    # N       : nominal value
    # I       : yearly interest over the nominal
    # RND     : random terms

    # OUTPUT:
    # out     : autocallable structure simulated discounted payoff

    from numpy import exp, sqrt

    # vars
    S_prev = S_0
    TtM[TtM.index[0]-1] = 0 # solve index issue in 'dt'

    # simu
    for t in t_steps:
        # diff = vol[t] * random() # check it # diffusion term

        # underlying dynamics
        dt = TtM[t] - TtM[t-1]
        S_t = S_prev * exp((Drift[t] - 0.5 * Vol[t] ** 2) * dt + Vol[t] * RND[t] * sqrt(dt))
        # update previous value
        S_prev = S_t

        # kick out barrier touched at t
        if S_t >= S_k:
            return (1 + TtM[t] * I) * exp(- Disc[t] * TtM[t])

    # kick out barrier never touched before the maturity
    if S_t > S_p:
        return (exp(- Disc[t] * TtM[t]))
    else:
        return (S_t / S_0 * exp(- Disc[t] * TtM[t]))

# modified function for distribuited monte carlo method
def _payoff(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I):

    # INPUT:
    # t_steps : time steps
    # TtM     : time to maturity
    # Drift   : drift list by time
    # Vol     : volatility list by time
    # Disc    : discount rate
    # S_0     : underlying initial value
    # S_k     : kickout barrier
    # S_p     : protection barrier
    # N       : nominal value
    # I       : yearly interest over the nominal

    # OUTPUT:
    # out     : autocallable structure simulated discounted payoff

    from numpy import exp, sqrt, random

    # vars
    S_prev = S_0
    TtM_prev = 0

    # simu
    for t in range(len(t_steps)):

        # underlying dynamics
        S_t = S_prev * exp((Drift[t] - 0.5 * Vol[t] ** 2) * (TtM[t] - TtM_prev) + Vol[t] * random.randn() * sqrt(TtM[t] - TtM_prev))

        # update previous values
        TtM_prev = TtM[t]
        S_prev = S_t

        # kick out barrier touched at t
        if S_t >= S_k:
            return (1 + TtM[t] * I) * exp(- Disc[t] * TtM[t])

    # kick out barrier never touched before the maturity
    if S_t > S_p:
        return (exp(- Disc[t] * TtM[t]))
    else:
        return (S_t / S_0 * exp(- Disc[t] * TtM[t]))


# PRICING TOOLS :
# * classic monte carlo method
# * parallel monte carlo method
# * distribuited monte carlo method with pyspark

def monteCarloPrice(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I, n_simu, RND):

    # INPUT:
    # t_steps : time steps
    # TtM     : time to maturity
    # Drift   : drift list by time
    # Vol     : volatility list by time
    # Disc    : discount rate
    # S_0     : underlying initial value
    # S_k     : kickout barrier
    # S_p     : protection barrier
    # N       : nominal value
    # I       : yearly interest over the nominal
    # n_simu  : number of simulations
    # RND     : random terms

    # OUTPUT:
    # out     : autocallable structure price

    import numpy as np 
    import pandas as pd 
    import time

    if RND == None:
        # generate pseudo-random sequence
        RND = pd.DataFrame(np.random.randn(int(n_simu), len(t_steps)), columns=t_steps)

    # starting_t = time.time()

    payoffs = [0] * int(n_simu) # initializes list
    for i in range(int(n_simu)):
        payoffs[i] = payoff(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I, RND.iloc[i])
    
    # elapsed_t = time.time() - starting_t 
    # print('\nMonte Carlo simulation completed in', elapsed_t, 's')

    return sum(payoffs) / n_simu


# using Parallel from joblib package
def parallelMonteCarloPrice(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I, n_simu, RND):

    # INPUT:
    # t_steps : time steps
    # TtM     : time to maturity
    # Drift   : drift list by time
    # Vol     : volatility list by time
    # Disc    : discount rate
    # S_0     : underlying initial value
    # S_k     : kickout barrier
    # S_p     : protection barrier
    # N       : nominal value
    # I       : yearly interest over the nominal
    # n_simu  : number of simulations
    # RND     : random terms

    # OUTPUT:
    # out     : autocallable structure price

    from joblib import Parallel, delayed
    import numpy as np 
    import pandas as pd 
    import time

    if RND == None:
        # generate pseudo-random sequence
        RND = pd.DataFrame(np.random.randn(int(n_simu), len(t_steps)), columns=t_steps)

    # starting_t = time.time()
    
    payoffs = [0] * int(n_simu) # initializes list

    # 'n_jobs=-1' uses all the PCU cores
    payoffs = Parallel(n_jobs=-1)(delayed(payoff)(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I, RND.iloc[i]) for i in range(int(n_simu)))

    # elapsed_t = time.time() - starting_t
    # print('\nMonte Carlo simulation completed in', elapsed_t, 's')

    return sum(payoffs) / n_simu


# using PySpark
def distribuitedMonteCarloPrice(inputParameter, flagParameter, t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I, sc, n_simu):

    # INPUT:
    # t_steps : time steps
    # TtM     : time to maturity
    # Drift   : drift list by time
    # Vol     : volatility list by time
    # Disc    : discount rate
    # S_0     : underlying initial value
    # S_k     : kickout barrier
    # S_p     : protection barrier
    # N       : nominal value
    # I       : yearly interest over the nominal
    # sc      : spark context
    # n_simu  : number of simulations

    # OUTPUT:
    # out     : autocallable structure price

    import numpy as np 
    import pandas as pd 
    import time
    import pyspark
    from pyspark import SparkConf, SparkContext
    from pyspark.sql import Row

    # convert pandas series to numpy array
    TtM = TtM.to_numpy()
    Drift = Drift.to_numpy()
    Vol = Vol.to_numpy()
    Disc = Disc.to_numpy()
    # initialize accumulator
    outputSum = sc.accumulator(0)
    
    if flagParameter == []:
        def sparkCustomizedPayoff(_input):
            outputSum.add(_payoff(t_steps, TtM, Drift, Vol, Disc, S_0, S_k, S_p, N, I))
    elif flagParameter == 'V':
        def sparkCustomizedPayoff(_input):
            _volatility = Vol * _input
            outputSum.add(_payoff(t_steps, TtM, Drift, _volatility, Disc, S_0, S_k, S_p, N, I))
    elif flagParameter == 'D':
        def sparkCustomizedPayoff(_input):
            _spot = S_0 * _input
            outputSum.add(_payoff(t_steps, TtM, Drift, Vol, Disc, _spot, S_k, S_p, N, I))
    elif flagParameter == 'R':
        def sparkCustomizedPayoff(_input):
            _drift = Drift * _input
            outputSum.add(_payoff(t_steps, TtM, _drift, Vol, Disc, S_0, S_k, S_p, N, I))
    else:
        return 0


    # generate python collection of initial variables
    inputData = [inputParameter] * n_simu

    # create RDD
    simuRDD = sc.parallelize(inputData)
    # print('RDD size :', simuRDD.count()) # debug

    # distribuited computation
    simuRDD.foreach(sparkCustomizedPayoff)
    return outputSum.value / n_simu


def startDistribuitedEnvironment():
    
    # import and initialize spark
    import findspark
    findspark.init()
    import pyspark
    from pyspark import SparkConf, SparkContext

    conf = SparkConf().setAppName('mySparkApp')
    sc = SparkContext(conf=conf)
    # spark_context.setLogLevel('WARN')
    
    print('Initialized PySpark, Conf and Context.\n') # debug
    return sc


def interestRate(Call, Put, Spot, Strk, TtM):

    # INPUT
    # Call : call price
    # Put  : put price
    # Spot : spot price
    # Strk : strike price
    # TtM  : time to maturity

    # OUTPUT
    # out  : interest rate

    import numpy as np 

    return np.log(Strk / (Spot + Put - Call)) / TtM


def impliedVolatility(target, flag, spot, strk, ttM, inR):

    # INPUT: 
    # target : target price (Call or Put)
    # flag   : 'C' if call option 'P' if put option
    # spot   : spot price
    # strk   : strike price
    # ttM    : time to maturity
    # inR    : interest rate

    # OUTPUT:
    # sigma  : implied volatility


    MAX_ITER = 100
    MAX_ERROR = 1.0e-5

    sigma = 0.5
    i = 0
    while (i < MAX_ITER):
        if flag == 'C': # call
            price = callPrice(spot, strk, ttM, inR, sigma)
        elif flag == 'P': # put
            price = putPrice(spot, strk, ttM, inR, sigma)
        else: # error
            price = target * 0 

        vega = vegaa(spot, strk, ttM, inR, sigma)
        diff = target - price

        if (abs(diff) < MAX_ERROR):
            return sigma # vol

        sigma = sigma + diff / vega
        i += 1

    # return best value so far
    return sigma


def impliedVolatilitySurface(Target, flag, Spot, Strk, TtM, InR):

    # INPUT: 
    # target : target price (Call or Put)
    # opt    : 'C' if call option 'P' if put option
    # Spot   : spot price
    # Strk   : strike price
    # TtM    : time to maturity
    # InR    : interest rate

    # OUTPUT:
    # Sigma  : implied volatility surface


    # initializes dataframe at 0.5
    Sigma_col = Target.columns
    Sigma = pd.DataFrame(0.5 * np.ones(Target.shape), columns=Sigma_col)
    for i in range(0, Sigma.shape[0]):
        for t in Sigma_col:
            Sigma[t][i] = impliedVolatility(Target[t][i], flag, Spot[t][i], Strk[t][i], TtM[t][i], InR[t][i])

    return Sigma
    

'''
def parallelImpliedVolatilitySurface(Target, opt_flag, Spot, Strk, TtM, InR):

    # INPUT: 
    # target : target price (Call or Put)
    # opt_flag : 'C' if call option 'P' if put option
    # Spot   : spot price
    # Strk   : strike price
    # TtM    : time to maturity
    # InR    : interest rate

    # OUTPUT:
    # Sigma  : implied volatility

    import myblackscholes as bs
    import numpy as np
    import pandas as pd 

    MAX_ITER = 100
    MAX_ERROR = 1.0e-5

    Sigma = pd.DataFrame(0.5 * np.ones(Target.shape), columns=Target.columns)
    FLAG = (Sigma == 0.5)
    print(FLAG)
    Price = Target * 0
    Vega = Target * 0

    i = 0
    while (i < MAX_ITER):
        if opt_flag == 'C': # call
            Price[FLAG] = bs.callPrice(Spot[FLAG], Strk[FLAG], TtM[FLAG], InR[FLAG], Sigma[FLAG])
        elif opt_flag == 'P': # put
            Price = bs.putPrice(Spot, Strk, TtM, InR, Sigma)
        else: # error
            return Target * 0

        Vega[FLAG] = bs.vega(Spot[FLAG], Strk[FLAG], TtM[FLAG], InR[FLAG], Sigma[FLAG])
        Diff = Target - Price
        FLAG = Diff.abs() > MAX_ERROR

        # debug
        print('i =', i)
        print(Diff)

        if (FLAG.any(axis=None) == False):
            return Sigma # vol

        Sigma[FLAG] = Sigma[FLAG] + Diff[FLAG] / Vega[FLAG]
        i += 1

    # return best value so far
    return Sigma

'''

import os

os.path.abspath("C://Users//F9223//Desktop//autocallable-simu-master//autocallable-simu-master")


### INPUTS :

print('\nINPUT AND PARAMETERS ESTIMATION...\n')

# parameters
n_simu = int(1e6) # 10^6 simu

# data
N = 1 # NOMINAL
S_0 = 3042 # SPOT PRICE
kickout = 1.10 # KICKOUT BARRIER PERCENTAGE
protection = 0.95 # PROTECTION_BARRIER
I = 0.04 # INTEREST
T = 2020 # MATURITY
t_0 = 2015

# other variables
S_p = S_0 * protection # PROTECTION BARRIER
S_k = S_0 * kickout # KICKOUT BARRIER
t_steps = range(t_0+1, T+1)

# input from excel file
xls_data = pd.ExcelFile('C://Users//F9223//Desktop//autocallable-simu-master//autocallable-simu-master//res//Data_Pricing.xlsx') # read pathfile
maturity_yrs = np.arange(2016, 2025+1, 1)

# strike prices
Strk = pd.read_excel(xls_data, sheet_name='Strike_Price', header=None, names=maturity_yrs)
# time to maturities
TtM = pd.read_excel(xls_data, sheet_name='Maturity', header=None, names=maturity_yrs)
# call options
Call = pd.read_excel(xls_data, sheet_name='Call_Price', header=None, names=maturity_yrs)
# put options
Put = pd.read_excel(xls_data, sheet_name='Put_Price', header=None, names=maturity_yrs)
# spot prices
Spot = pd.read_excel(xls_data, sheet_name='Underlying_Price', header=None, names=maturity_yrs)
# (daily) risk-free rate
d_RfR = pd.read_excel(xls_data, sheet_name='Risk_Free_Rate_EONIA', header=None, names=maturity_yrs)


### VARS ESTIMATION :

starting_time = time.time()

# interest rate
InR = interestRate(Call, Put, Spot, Strk, TtM)
# implied volatility
flag = 'C' # call option is used for implied vol
ImV = impliedVolatilitySurface(Call, flag, Spot, Strk, TtM, InR)
# risk-free rate -> discount rate
DsR = d_RfR.iloc[0] * np.sqrt(365)
# debug
elapsed_time = time.time() - starting_time
print('Interest rates, implied volatility, discount rates estimated in', elapsed_time, 's\n')

# find key-values to interpolate from dataframes
S = Strk[t_steps[0]]
i = 0
while (S_p > S[i]):  
    i += 1
# interpolation: dataframes -> series
k_Drift = (InR.iloc[i] * (S_p - S[i-1]) + InR.iloc[i-1] * (S[i] - S_p)) / (S[i] - S[i-1])
k_Vol = (ImV.iloc[i] * (S_p - S[i-1]) + ImV.iloc[i-1] * (S[i] - S_p)) / (S[i] - S[i-1])
k_TtM = TtM.iloc[0] # constant over strike value


### PLOT GREEKS BY MONTECARLO SIMULATION :

# initialize spark
sc = startDistribuitedEnvironment()

## VEGA :
print('\n\nSIMULATING VEGA...\n')
starting_time = time.time()
vol_param = np.arange(0, 5, 0.5)

# simulate range of prices
priceForVega, vol = grk.computePricesForGreek('V', t_steps, k_TtM, k_Drift, k_Vol, DsR, S_0, S_k, S_p, N, I, vol_param, n_simu, sc)
# compute discrete derivatives
vega, vol_mid = grk.derivateGreek(priceForVega, vol)
# debug
print('\nElapsed time =', time.time() - starting_time, 's')
# plot vega
fig1, ax11, ax12 = grk.plot(vega, vol_mid, priceForVega, vol, 'VEGA', 'PRICE', 'VOLATILITY')


## DELTA :
print('\n\nSIMULATING DELTA...\n')
starting_time = time.time()
vol_param = np.arange(0.5, 1.5, 0.1)

# simulate range of prices
priceForDelta, spot = grk.computePricesForGreek('D', t_steps, k_TtM, k_Drift, k_Vol, DsR, S_0, S_k, S_p, N, I, vol_param, n_simu, sc)
# compute discrete derivatives
delta, spot_mid = grk.derivateGreek(priceForDelta, spot)
# debug
print('\nElapsed time =', time.time() - starting_time, 's')
# plot delta
fig2, ax21, ax22 = grk.plot(delta, spot_mid, priceForDelta, spot, 'DELTA', 'PRICE', 'SPOT PRICE') 


## RHO :
print('\n\nSIMULATING RHO...\n')
starting_time = time.time()
vol_param = np.arange(-5, 5, 1)

# simulate range of prices
priceForRho, inR = grk.computePricesForGreek('R', t_steps, k_TtM, k_Drift, k_Vol, DsR, S_0, S_k, S_p, N, I, vol_param, n_simu, sc)
# compute discrete derivatives
rho, inR_mid = grk.derivateGreek(priceForRho, inR)
# debug
print('\nElapsed time =', time.time() - starting_time, 's')
# plot delta
fig3, ax31, ax32 = grk.plot(rho, inR_mid, priceForRho, inR, 'RHO', 'PRICE', 'INTEREST RATE')
# ax32.set_ylim([0.2, 0.8]) # correction for the 'rho' ax


## GAMMA :
print('\n\nSIMULATING GAMMA...\n')
starting_time = time.time()
# compute discrete derivatives
# (gamma is the second derivative of price over the spot price, i.e. the first derivative of delta)
gamma, spot_midmid = grk.derivateGreek(delta, spot_mid)
# debug
print('Elapsed time =', time.time() - starting_time, 's')
# plot gamma
fig4, ax41, ax42 = grk.plot(gamma, spot_midmid, priceForDelta, spot, 'GAMMA', 'PRICE', 'SPOT PRICE')

# show plots
plt.show() 
